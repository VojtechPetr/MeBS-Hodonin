---
import { Icon } from 'astro-icon/components';

interface Props {
  placeholder?: string;
  searchIndexPath?: string;
}

const {
  placeholder = 'Hledej...',
  searchIndexPath = '/search-index.json',
} = Astro.props;
---

<div class="relative">
  <!-- Magnifier Icon -->
  <button
    type="button"
    class="text-muted hover:bg-blue-200 rounded-full p-2"
    aria-label="Open Search"
  >
    <Icon name="tabler:search" class="w-6 h-6" />
  </button>

  <!-- Search Bar -->
  <div
    id="search-bar"
    class="hidden absolute top-12 right-0 bg-white shadow-lg rounded-md p-4 w-96 z-50"
  >
    <input
      type="text"
      id="search-input"
      placeholder={placeholder}
      aria-label="Search"
      class="w-full border rounded-md p-2"
    />
    <ul id="search-results" class="mt-2 space-y-2"></ul>
  </div>

  <script>
    const searchIndexPath = "{{ searchIndexPath }}";
    let isSearchVisible = false;

    // Toggle the visibility of the search bar
    const toggleSearchBar = () => {
      isSearchVisible = !isSearchVisible;
      const searchBar = document.getElementById('search-bar');
      if (searchBar) {
        searchBar.classList.toggle('hidden', !isSearchVisible);
        if (isSearchVisible) {
          searchBar.querySelector('input')?.focus();
        }
      }
    };

    const closeSearchBar = () => {
      const searchBar = document.getElementById('search-bar');
      if (searchBar) {
        searchBar.classList.add('hidden');
      }
      isSearchVisible = false;
    };

    document.addEventListener('DOMContentLoaded', () => {
      // Toggle button click event
      const toggleButton = document.querySelector('[aria-label="Open Search"]');
      if (toggleButton) {
        toggleButton.addEventListener('click', toggleSearchBar);
      }

      // Search input event
      const searchInput = document.getElementById('search-input');
      searchInput?.addEventListener('keyup', async (event) => {
        const target = event.target as HTMLInputElement | null;
        if (!target) return;

        const query = target.value.toLowerCase();
        const resultsContainer = document.getElementById('search-results');
        if (!resultsContainer) return;

        if (!query) {
          resultsContainer.innerHTML = '';
          return;
        }

        try {
          const response = await fetch(searchIndexPath);
          const index = await response.json();
          const results = index.filter((item) =>
            item.title.toLowerCase().includes(query) ||
            item.content.toLowerCase().includes(query)
          );

          resultsContainer.innerHTML = results
            .map(
              (result) => `
              <li>
                <a href="${result.url}" class="block p-2 hover:bg-blue-200 rounded-md">${result.title}</a>
              </li>
            `
            )
            .join('');
        } catch (error) {
          console.error('Failed to fetch search index:', error);
        }
      });

      // Close the search bar when clicking outside
      document.addEventListener('click', (event) => {
        const searchBar = document.getElementById('search-bar');
        const toggleButton = document.querySelector('[aria-label="Open Search"]');
        
        const target = event.target as HTMLElement | null;

        if (
          searchBar &&
          toggleButton &&
          !searchBar.contains(target) &&
          !toggleButton.contains(target)
        ) {
          closeSearchBar();
        }
      });

      // Close the search bar when pressing "Esc"
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && isSearchVisible) {
          closeSearchBar();
        }
      });
    });
  </script>

  <style>
    .hidden {
      display: none;
    }
  </style>
</div>
