---
import { Icon } from 'astro-icon/components';

interface Props {
  placeholder?: string;
  searchIndexPath?: string;
}

const { placeholder = 'Hledej...', searchIndexPath = '/search-index.json' } = Astro.props;
---

<div class="relative">
  <!-- Magnifier Icon -->
  <button type="button" class="text-muted hover:bg-blue-200 rounded-full p-2" aria-label="Open Search">
    <Icon name="tabler:search" class="w-6 h-6" />
  </button>

  <!-- Search Bar -->
  <div id="search-bar" class="hidden absolute top-12 right-0 bg-white shadow-lg rounded-md p-4 w-96 z-50">
    <input
      type="text"
      id="search-input"
      placeholder={placeholder}
      aria-label="Search"
      class="w-full border rounded-md p-2"
    />
    <ul id="search-results" class="mt-2 space-y-2"></ul>
  </div>

  <script>
    const searchIndexPath = '/search-index.json';
    let isSearchVisible = false;

    const initializeSearchBar = () => {
      const toggleButton = document.querySelector('[aria-label="Open Search"]');
      const searchBar = document.getElementById('search-bar');
      const searchInput = document.getElementById('search-input');
      const resultsContainer = document.getElementById('search-results');

      if (!toggleButton || !searchBar || !searchInput || !resultsContainer) return;

      // Remove previous listeners
      toggleButton.removeEventListener('click', toggleSearchBar);
      searchInput.removeEventListener('keyup', handleSearchInput);
      document.removeEventListener('click', handleDocumentClick);
      document.removeEventListener('keydown', handleEscapeKey);

      // Add new listeners
      toggleButton.addEventListener('click', toggleSearchBar);
      searchInput.addEventListener('keyup', handleSearchInput);
      document.addEventListener('click', handleDocumentClick);
      document.addEventListener('keydown', handleEscapeKey);
    };

    const toggleSearchBar = () => {
      isSearchVisible = !isSearchVisible;
      const searchBar = document.getElementById('search-bar');
      if (searchBar) {
        searchBar.classList.toggle('hidden', !isSearchVisible);
        if (isSearchVisible) {
          searchBar.querySelector('input')?.focus();
        }
      }
    };

    const closeSearchBar = () => {
      const searchBar = document.getElementById('search-bar');
      if (searchBar) {
        searchBar.classList.add('hidden');
      }
      isSearchVisible = false;
    };

    const handleSearchInput = async (event) => {
      const query = event.target.value.toLowerCase();
      const resultsContainer = document.getElementById('search-results');
      if (!resultsContainer) return;

      if (!query) {
        resultsContainer.innerHTML = '';
        return;
      }

      try {
        const response = await fetch(searchIndexPath);
        if (!response.ok) {
          throw new Error(`Error fetching search index: ${response.status}`);
        }

        const index = await response.json();
        const results = index.filter(
          (item) => item.title.toLowerCase().includes(query) || item.content.toLowerCase().includes(query)
        );

        resultsContainer.innerHTML = results
          .map(
            (result) => `
            <li>
              <a href="${result.url}" class="block p-2 hover:bg-blue-200 rounded-md">${result.title}</a>
            </li>
          `
          )
          .join('');
      } catch (error) {
        console.error('Failed to fetch search index:', error);
        resultsContainer.innerHTML = '<li class="text-red-500">Search unavailable</li>';
      }
    };

    const handleDocumentClick = (event) => {
      const searchBar = document.getElementById('search-bar');
      const toggleButton = document.querySelector('[aria-label="Open Search"]');

      if (searchBar && toggleButton && !searchBar.contains(event.target) && !toggleButton.contains(event.target)) {
        closeSearchBar();
      }
    };

    const handleEscapeKey = (event) => {
      if (event.key === 'Escape' && isSearchVisible) {
        closeSearchBar();
      }
    };

    const reinitializeSearchBar = () => {
      initializeSearchBar();
    };

    document.addEventListener('DOMContentLoaded', () => {
      initializeSearchBar();

      // Listener for Astro navigation (SPA)
      document.addEventListener('astro:after-swap', reinitializeSearchBar);

      // MutationObserver as fallback
      const observer = new MutationObserver(() => {
        reinitializeSearchBar();
      });
      observer.observe(document.body, { childList: true, subtree: true });
    });
  </script>

  <style>
    .hidden {
      display: none;
    }
  </style>
</div>
