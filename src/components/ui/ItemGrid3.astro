---
import type { ItemGrid3 as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{items.length > 0 && (
  <div
    class={twMerge(
      `grid gap-8 gap-x-12 sm:gap-y-8 ${
        columns === 4
          ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
          : columns === 3
          ? 'lg:grid-cols-3 sm:grid-cols-2'
          : columns === 2
          ? 'sm:grid-cols-2'
          : ''
      }`,
      containerClass
    )}
  >
    {items.map(({ title, description, icon, callToAction, classes: itemClasses = {}, contacts = [] }) => (
      <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel)}>
        {(icon || defaultIcon) && (
          <Icon name={icon || defaultIcon} class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon)} />
        )}
        <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
        {description && (
          <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
        )}

        {contacts.length > 0 && (
          <div class="mt-4">
            {contacts.map(({ type, value }) => (
              <p class="flex items-center mb-2">
                {type === 'phone' && <Icon name="tabler:phone" class="w-5 h-5 mr-2 text-primary" />}
                {type === 'email' && <Icon name="tabler:mail" class="w-5 h-5 mr-2 text-primary" />}
                {value}
              </p>
            ))}
          </div>
        )}
        
        {callToAction && (
          <div class="mt-2">
            <Button {...callToAction} />
          </div>
        )}
      </div>
    ))}
  </div>
)}
